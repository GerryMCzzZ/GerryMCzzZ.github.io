<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java Web开发技术演进深度解析：从Servlet到Spring Boot的源码级剖析</title>
    <link href="/2025/06/05/javaweb/"/>
    <url>/2025/06/05/javaweb/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-Web开发技术演进深度解析：从Servlet到Spring-Boot的源码级剖析"><a href="#Java-Web开发技术演进深度解析：从Servlet到Spring-Boot的源码级剖析" class="headerlink" title="Java Web开发技术演进深度解析：从Servlet到Spring Boot的源码级剖析"></a>Java Web开发技术演进深度解析：从Servlet到Spring Boot的源码级剖析</h1><h2 id="一、Servlet技术内核分析"><a href="#一、Servlet技术内核分析" class="headerlink" title="一、Servlet技术内核分析"></a>一、Servlet技术内核分析</h2><h3 id="1-Servlet接口设计"><a href="#1-Servlet接口设计" class="headerlink" title="1. Servlet接口设计"></a>1. Servlet接口设计</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// javax.servlet.Servlet 核心接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Servlet</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ServletConfig config)</span> <span class="hljs-keyword">throws</span> ServletException;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(ServletRequest req, ServletResponse res)</span> <br>        <span class="hljs-keyword">throws</span> ServletException, IOException;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span>;<br>    <span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-架构特点："><a href="#2-架构特点：" class="headerlink" title="2. 架构特点："></a>2. 架构特点：</h3><p>基于责任链模式：每个Servlet处理特定请求</p><p>线程模型：默认单例多线程（需注意线程安全）</p><p>生命周期：init() → service() → destroy()2. 请求处理流程（Tomcat为例）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Tomcat连接器伪代码</span><br><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>    socket = accept();          <span class="hljs-comment">// 接收连接</span><br>    request = parse(socket);    <span class="hljs-comment">// 解析HTTP协议</span><br>    ThreadPool.execute(() -&gt; &#123;<br>        servlet.service(request, response); <span class="hljs-comment">// 分发到Servlet</span><br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-关键扩展点："><a href="#3-关键扩展点：" class="headerlink" title="3. 关键扩展点："></a>3. 关键扩展点：</h3><p>ServletContainerInitializer：替代web.xml的编程式配置</p><p>FilterChain：实现AOP切面逻辑</p><h2 id="二、JSP编译原理"><a href="#二、JSP编译原理" class="headerlink" title="二、JSP编译原理"></a>二、JSP编译原理</h2><h3 id="1-JSP转译过程"><a href="#1-JSP转译过程" class="headerlink" title="1. JSP转译过程"></a>1. JSP转译过程</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">hello.jsp <br>  → hello_jsp.java (Servlet源码) <br>  → hello_jsp.class<br></code></pre></td></tr></table></figure><p>示例转译代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 自动生成的_jspServlet</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">_jspService</span><span class="hljs-params">(HttpServletRequest request, </span><br><span class="hljs-params">                       HttpServletResponse response)</span> &#123;<br>    out.write(<span class="hljs-string">&quot;&lt;html&gt;&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;name&quot;</span>); <span class="hljs-comment">// 内嵌Java代码</span><br>    out.write(<span class="hljs-string">&quot;Hello &quot;</span> + (name != <span class="hljs-literal">null</span> ? name : <span class="hljs-string">&quot;Guest&quot;</span>));<br>    out.write(<span class="hljs-string">&quot;&lt;/html&gt;&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-EL表达式实现"><a href="#2-EL表达式实现" class="headerlink" title="2. EL表达式实现"></a>2. EL表达式实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Spring EL解析器核心</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpelExpressionParser</span> &#123;<br>    <span class="hljs-keyword">public</span> Expression <span class="hljs-title function_">parseExpression</span><span class="hljs-params">(String expression)</span> &#123;<br>        <span class="hljs-keyword">return</span> doParseExpression(expression, <span class="hljs-literal">null</span>);<br>    &#125;<br>    <span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>表达式处理流程：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">词法分析 → 2. 语法树构建 → 3. 运行时求值<br></code></pre></td></tr></table></figure><h2 id="三、Spring-MVC架构解密"><a href="#三、Spring-MVC架构解密" class="headerlink" title="三、Spring MVC架构解密"></a>三、Spring MVC架构解密</h2><h3 id="1-九大核心组件"><a href="#1-九大核心组件" class="headerlink" title="1. 九大核心组件"></a>1. 九大核心组件</h3><p>组件接口默认实现类<br>前端控制器DispatcherServletFrameworkServlet<br>处理器映射HandlerMappingRequestMappingHandlerMapping<br>视图解析ViewResolverInternalResourceViewResolver</p><h3 id="2-请求处理时序图"><a href="#2-请求处理时序图" class="headerlink" title="2. 请求处理时序图"></a>2. 请求处理时序图</h3><p>@startuml<br>Browser -&gt; DispatcherServlet: HTTP Request<br>DispatcherServlet -&gt; HandlerMapping: getHandler()<br>HandlerMapping –&gt; DispatcherServlet: HandlerExecutionChain<br>DispatcherServlet -&gt; HandlerAdapter: handle()<br>HandlerAdapter –&gt; Controller: method invoke<br>Controller -&gt; Service: business logic<br>Service –&gt; Controller: return<br>Controller –&gt; HandlerAdapter: ModelAndView<br>HandlerAdapter –&gt; DispatcherServlet: result<br>DispatcherServlet -&gt; ViewResolver: resolveView()<br>ViewResolver –&gt; DispatcherServlet: View<br>DispatcherServlet -&gt; View: render()<br>View –&gt; DispatcherServlet: HTML<br>DispatcherServlet -&gt; Browser: HTTP Response<br>@enduml</p><h3 id="3-关键源码片段"><a href="#3-关键源码片段" class="headerlink" title="3. 关键源码片段"></a>3. 关键源码片段</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// DispatcherServlet.doDispatch()</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doDispatch</span><span class="hljs-params">(HttpServletRequest request, </span><br><span class="hljs-params">                        HttpServletResponse response)</span> &#123;<br>    <span class="hljs-type">HandlerExecutionChain</span> <span class="hljs-variable">mappedHandler</span> <span class="hljs-operator">=</span> getHandler(request);<br>    <span class="hljs-type">HandlerAdapter</span> <span class="hljs-variable">ha</span> <span class="hljs-operator">=</span> getHandlerAdapter(mappedHandler.getHandler());<br>    <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">mv</span> <span class="hljs-operator">=</span> ha.handle(request, response, mappedHandler.getHandler());<br>    processDispatchResult(request, response, mappedHandler, mv, <span class="hljs-literal">null</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四、Spring-Boot自动化配置原理"><a href="#四、Spring-Boot自动化配置原理" class="headerlink" title="四、Spring Boot自动化配置原理"></a>四、Spring Boot自动化配置原理</h2><h3 id="1-条件装配机制"><a href="#1-条件装配机制" class="headerlink" title="1. 条件装配机制"></a>1. 条件装配机制</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 典型自动配置类</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ConditionalOnClass(&#123; DataSource.class, EmbeddedDatabaseType.class &#125;)</span><br><span class="hljs-meta">@EnableConfigurationProperties(DataSourceProperties.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DataSourceAutoConfiguration</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@ConditionalOnMissingBean</span><br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">dataSource</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 自动创建HikariCP或Tomcat连接池</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-启动过程关键步骤"><a href="#2-启动过程关键步骤" class="headerlink" title="2. 启动过程关键步骤"></a>2. 启动过程关键步骤</h3><p>SpringApplication.run()</p><p>加载META-INF&#x2F;spring.factories</p><p>执行AutoConfigurationImportSelector</p><p>过滤@Conditional条件</p><p>实例化自动配置Bean</p><h3 id="3-内嵌容器实现"><a href="#3-内嵌容器实现" class="headerlink" title="3. 内嵌容器实现"></a>3. 内嵌容器实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// TomcatWebServer启动代码</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> WebServerException &#123;<br>    <span class="hljs-built_in">this</span>.tomcat.start();<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">monitorThread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-string">&quot;container-1&quot;</span>) &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            TomcatWebServer.<span class="hljs-built_in">this</span>.monitor();<br>        &#125;<br>    &#125;;<br>    monitorThread.start();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="五、扩展知识体系"><a href="#五、扩展知识体系" class="headerlink" title="五、扩展知识体系"></a>五、扩展知识体系</h2><h3 id="1-性能优化方向"><a href="#1-性能优化方向" class="headerlink" title="1. 性能优化方向"></a>1. 性能优化方向</h3><p>Servlet级：</p><p>异步处理（AsyncContext）</p><p>NIO支持（Servlet 3.1+）</p><p>Spring级：</p><p>响应式编程（WebFlux）</p><p>GraalVM原生镜像</p><h3 id="2-现代架构演进"><a href="#2-现代架构演进" class="headerlink" title="2. 现代架构演进"></a>2. 现代架构演进</h3><p>图表<br>代码</p><h3 id="3-调试技巧"><a href="#3-调试技巧" class="headerlink" title="3. 调试技巧"></a>3. 调试技巧</h3><p>查看自动配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -jar app.jar --debug<br></code></pre></td></tr></table></figure><p>分析Bean依赖：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> ConfigurableApplicationContext ctx;<br><br>ctx.getBeanDefinitionNames(); <span class="hljs-comment">// 获取所有Bean名</span><br></code></pre></td></tr></table></figure><h2 id="六、最佳实践建议"><a href="#六、最佳实践建议" class="headerlink" title="六、最佳实践建议"></a>六、最佳实践建议</h2><h3 id="版本选择："><a href="#版本选择：" class="headerlink" title="版本选择："></a>版本选择：</h3><p>Servlet 4.0+（HTTP&#x2F;2支持）</p><p>Spring Boot 3.x（Java 17+）</p><h3 id="架构决策树："><a href="#架构决策树：" class="headerlink" title="架构决策树："></a>架构决策树：</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs text">if (需要快速验证)<br>  使用Spring Boot Starter<br>else if (需要极致性能)<br>  考虑Vert.x或Quarkus<br>else if (遗留系统改造)<br>  渐进式迁移(混合架构)<br>性能数据参考：<br></code></pre></td></tr></table></figure><p>框架QPS内存占用启动时间<br>原生Servlet35k50MB0.3s<br>Spring Boot28k150MB4.5s<br>WebFlux32k120MB3.2s</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">该文档通过源码分析+架构图示+性能数据的三维视角，完整呈现了Java Web技术的进化路径。建议结合JDK和Spring源码进行对照阅读，可深入理解设计哲学。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>知识体系</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java使用阿里云短信服务</title>
    <link href="/2021/01/15/aliyun_sms/"/>
    <url>/2021/01/15/aliyun_sms/</url>
    
    <content type="html"><![CDATA[<h2 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h2><p>首先要开通阿里云的短信服务，然后在控制台中找到短信服务。进入后就是以下界面。其中我们需要4个东西：accessKeyId、accessKeySecret、短信模板和短信签名。</p><p><img src="https://img-blog.csdnimg.cn/20210107110554104.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjgzNzg5OA==,size_16,color_FFFFFF,t_70" alt="短信服务主界面"><span id="more"></span></p><h3 id="获取AcessKey："><a href="#获取AcessKey：" class="headerlink" title="获取AcessKey："></a>获取AcessKey：</h3><p>accessKeyId、accessKeySecret是阿里云API的密钥，阿里云许多产品都需要他们绑定，所以需要注意防护。进入AccessKey页面通过短信获取即可，第一次使用的话需要创建一个，如下图所示。<br><img src="https://img-blog.csdnimg.cn/20210112162312318.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjgzNzg5OA==,size_16,color_FFFFFF,t_70" alt="AccessKey获取示例"></p><h3 id="短信签名申请："><a href="#短信签名申请：" class="headerlink" title="短信签名申请："></a>短信签名申请：</h3><p>需要注意的是短信签名不需要自己添加【】、()、[]符号，签名发送会自带【】符号，避免重复。其余个人和企业账户规则可在申请规范中详细查看。如下图：<br><img src="https://img-blog.csdnimg.cn/20210112163418802.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjgzNzg5OA==,size_16,color_FFFFFF,t_70" alt="短信签名申请示例"></p><h3 id="短信模板申请："><a href="#短信模板申请：" class="headerlink" title="短信模板申请："></a>短信模板申请：</h3><p>1、选择模板类型。<br>2、设置模板名称。<br>3、设置模板内容：最终短信会显示的内容，变量用${code}占用。<br>4、填写申请说明。<br>示例及模板预览如下图：<br><img src="https://img-blog.csdnimg.cn/20210112164129475.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjgzNzg5OA==,size_16,color_FFFFFF,t_70" alt="短信模板申请填写示例"><br><img src="https://img-blog.csdnimg.cn/20210112164230316.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjgzNzg5OA==,size_16,color_FFFFFF,t_70" alt="示例模板预览"></p><h2 id="二、代码实现"><a href="#二、代码实现" class="headerlink" title="二、代码实现"></a>二、代码实现</h2><h3 id="引入阿里云短信SDK"><a href="#引入阿里云短信SDK" class="headerlink" title="引入阿里云短信SDK"></a>引入阿里云短信SDK</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>&lt;groupId&gt;com.aliyun&lt;/groupId&gt;<br>    &lt;artifactId&gt;aliyun-java-sdk-core&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">3.7</span><span class="hljs-number">.1</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;com.aliyun&lt;/groupId&gt;<br>    &lt;artifactId&gt;aliyun-java-sdk-dysmsapi&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">1.1</span><span class="hljs-number">.0</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h3 id="示例工具类"><a href="#示例工具类" class="headerlink" title="示例工具类"></a>示例工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> CXD</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 阿里云发送短信工具类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/1/4</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AlySmsUtils</span> &#123;<br><br>    <span class="hljs-comment">// 产品名称:云通信短信API产品,开发者无需替换</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Dysmsapi&quot;</span>;<br>    <span class="hljs-comment">// 产品域名,开发者无需替换</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">domain</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;dysmsapi.aliyuncs.com&quot;</span>;<br><br>    <span class="hljs-comment">// TODO 此处需要替换成开发者自己的AK(在阿里云访问控制台寻找)</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">accessKeyId</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;********&quot;</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">accessKeySecret</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;***********&quot;</span>;<br><br><br>    <span class="hljs-comment">//自定义短信静态类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">smsToTest</span><span class="hljs-params">(String telephone, String code)</span> <span class="hljs-keyword">throws</span> ClientException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">templateCode</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SMS_123456789&quot;</span>; <span class="hljs-comment">//在阿里云官网注册的短信模板码</span><br>        sendSms(telephone,code, templateCode);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SendSmsResponse <span class="hljs-title function_">sendSms</span><span class="hljs-params">(String telephone, String code, String templateCode)</span> <span class="hljs-keyword">throws</span> ClientException &#123;<br>        <span class="hljs-comment">// 可自助调整超时时间</span><br>        System.setProperty(<span class="hljs-string">&quot;sun.net.client.defaultConnectTimeout&quot;</span>, <span class="hljs-string">&quot;10000&quot;</span>);<br>        System.setProperty(<span class="hljs-string">&quot;sun.net.client.defaultReadTimeout&quot;</span>, <span class="hljs-string">&quot;10000&quot;</span>);<br><br>        <span class="hljs-comment">// 初始化acsClient,暂不支持region化</span><br>        <span class="hljs-type">IClientProfile</span> <span class="hljs-variable">profile</span> <span class="hljs-operator">=</span> DefaultProfile.getProfile(<span class="hljs-string">&quot;cn-hangzhou&quot;</span>, accessKeyId, accessKeySecret);<br>        DefaultProfile.addEndpoint(<span class="hljs-string">&quot;cn-hangzhou&quot;</span>, <span class="hljs-string">&quot;cn-hangzhou&quot;</span>, product, domain);<br>        <span class="hljs-type">IAcsClient</span> <span class="hljs-variable">acsClient</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultAcsClient</span>(profile);<br><br>        <span class="hljs-comment">// 组装请求对象-具体描述见控制台-文档部分内容</span><br>        <span class="hljs-type">SendSmsRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SendSmsRequest</span>();<br>        <span class="hljs-comment">// 必填:待发送手机号</span><br>        request.setPhoneNumbers(telephone);<br>        <span class="hljs-comment">// 必填:短信签名-可在短信控制台中找到</span><br>        request.setSignName(<span class="hljs-string">&quot;测试模板&quot;</span>);   <span class="hljs-comment">//阿里官网注册的短信签名名称</span><br>        <span class="hljs-comment">// 必填:短信模板-可在短信控制台中找到</span><br>        request.setTemplateCode(templateCode);<br>        <span class="hljs-comment">// 可选:模板中的变量替换JSON串,如模板内容为&quot;亲爱的用户,您的验证码为$&#123;code&#125;&quot;时,此处的值为</span><br>        request.setTemplateParam(<span class="hljs-string">&quot;&#123;\&quot;code\&quot;:\&quot;&quot;</span> + code + <span class="hljs-string">&quot;\&quot;&#125;&quot;</span>);<br><br>        <span class="hljs-comment">// 选填-上行短信扩展码(无特殊需求用户请忽略此字段)</span><br>        <span class="hljs-comment">// request.setSmsUpExtendCode(&quot;90997&quot;);</span><br><br>        <span class="hljs-comment">// 可选:outId为提供给业务方扩展字段,最终在短信回执消息中将此值带回给调用者</span><br>        request.setOutId(<span class="hljs-string">&quot;yourOutId&quot;</span>);<br><br>        <span class="hljs-comment">// hint 此处可能会抛出异常，注意catch</span><br>        <span class="hljs-type">SendSmsResponse</span> <span class="hljs-variable">sendSmsResponse</span> <span class="hljs-operator">=</span> acsClient.getAcsResponse(request);<br>        <span class="hljs-keyword">if</span> (sendSmsResponse.getCode() != <span class="hljs-literal">null</span> &amp;&amp; sendSmsResponse.getCode().equals(<span class="hljs-string">&quot;OK&quot;</span>)) &#123;<br>            System.out.println(<span class="hljs-string">&quot;短信发送成功！&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;短信发送失败！&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> sendSmsResponse;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="使用测试类"><a href="#使用测试类" class="headerlink" title="使用测试类"></a>使用测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//发送短信验证码</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">SmsCode</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClientException &#123;<br>       <span class="hljs-comment">//发送信息的手机号</span><br>       <span class="hljs-type">String</span> <span class="hljs-variable">telephone</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;12345678910&quot;</span>;<br>       <span class="hljs-comment">//发送的验证码</span><br>       <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;666666&quot;</span>;<br>       <span class="hljs-comment">//发送的短信模板（阿里云平台设置）</span><br>       <span class="hljs-type">String</span> <span class="hljs-variable">templateCode</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SMS_132695077&quot;</span>;<br><br>       AlySmsUtils.sendSms(telephone, code, templateCode);<br>   &#125;<br><br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClientException &#123;<br>       SmsCode();<br>   &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JAVA工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>小工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java正则表达式过滤手机号、身份证等常用信息</title>
    <link href="/2021/01/12/java_info_filter/"/>
    <url>/2021/01/12/java_info_filter/</url>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在我们日常开发中，常常会用到一些固定信息，如：手机号、身份证等。也会对账户名，密码等信息作特定的限制。那么就需要过滤掉一些垃圾信息，保证数据的准确性。这里我们通过正则表达式对字符串进行匹配过滤。</p><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>正则表达式可以用字符串来描述规则，并用来匹配字符串。比如：”\\d”表示可以匹配一位0~9的数字，其中第一个”&quot;是转义字符。如果想匹配多位字符需要在表达式后面加”{最小位数，最大位数}”（{2}表示只能匹配2位数字）：”\\d{4,10}”表示可匹配4-10位数字。在String中有一个方法matches就是用来匹配字符串或规则的， 实际运用如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>       System.out.println(<span class="hljs-string">&quot;0&quot;</span>.matches(<span class="hljs-string">&quot;\\d&quot;</span>));  <span class="hljs-comment">//结果：true</span><br>        System.out.println(<span class="hljs-string">&quot;a&quot;</span>.matches(<span class="hljs-string">&quot;\\d&quot;</span>));  <span class="hljs-comment">//结果：false</span><br>        System.out.println(<span class="hljs-string">&quot;1234&quot;</span>.matches(<span class="hljs-string">&quot;\\d&quot;</span>));  <span class="hljs-comment">//结果：false</span><br>        System.out.println(<span class="hljs-string">&quot;1234&quot;</span>.matches(<span class="hljs-string">&quot;\\d&#123;4,10&#125;&quot;</span>));  <span class="hljs-comment">//结果：true</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><span id="more"></span><p>一般来说，匹配规则习惯用[ ]括起来，匹配个数用{ }括起来，’^’匹配输入字符串的开始位置，’$’匹配输入字符串的结束位置，一般来说加上这个2个字符只是一个规范，加与不加效果都一样。常用的表达式如下：</p><table><thead><tr><th>表达式</th><th>匹配内容</th><th>表达式</th><th>匹配内容</th></tr></thead><tbody><tr><td>[. ]</td><td>所有字符</td><td>[x|y]</td><td>x或y</td></tr><tr><td>[\\d]</td><td>0-9的数字</td><td>[xyz]</td><td>x或y或z字符集合</td></tr><tr><td>[0-9]</td><td>0-9的数字</td><td>[^a-z]</td><td>除a-z之外的字符</td></tr><tr><td>[a-z]</td><td>a-z的字符</td><td>*</td><td>匹配前面的子表达式零次或多次</td></tr><tr><td>[A-Z]</td><td>A-Z的字符</td><td>+</td><td>匹配前面的子表达式一次或多次</td></tr><tr><td>[\\u4E00-\\u9FA5]</td><td>中文字符</td><td>?</td><td>匹配前面的子表达式零次或一次</td></tr></tbody></table><h2 id="代码工具类"><a href="#代码工具类" class="headerlink" title="代码工具类"></a>代码工具类</h2><p>在开发中我们常常会用到一些信息，我整理了一个过滤工具类。其中固定信息可以借鉴如电话、身份证。其余信息可以根据自己需求修改。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InfoFilterUtil</span> &#123;<br>    <span class="hljs-comment">//匹配用户名</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">checkUserName</span><span class="hljs-params">(String username)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">regExp</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;^[a-zA-Z0-9]&#123;4,16&#125;3$&quot;</span>;<br>        <span class="hljs-keyword">return</span> username.matches(regExp);<br><br>    &#125;<br><br>    <span class="hljs-comment">//匹配密码</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">checkPassword</span><span class="hljs-params">(String password)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">regExp</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;^[a-zA-Z0-9@/#.+=]&#123;4,16&#125;$&quot;</span>;<br>        <span class="hljs-keyword">return</span> password.matches(regExp);<br>    &#125;<br><br>    <span class="hljs-comment">//匹配姓名</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">checkName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">regExp</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;^[\\u4E00-\\u9FA5]&#123;2,6&#125;$&quot;</span>;<br>        <span class="hljs-keyword">return</span> name.matches(regExp);<br>    &#125;<br><br>    <span class="hljs-comment">//匹配手机号</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">checkPhone</span><span class="hljs-params">(String phone)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">regExp</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;^[1]([3-9])\\d&#123;9&#125;$&quot;</span>;<br>        <span class="hljs-keyword">return</span> phone.matches(regExp);<br>    &#125;<br><br>    <span class="hljs-comment">//匹配手机验证码</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">checkCaptcha</span><span class="hljs-params">(String code)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">regExp</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;^[0-9]&#123;6&#125;$&quot;</span>;<br>        <span class="hljs-keyword">return</span> code.matches(regExp);<br>    &#125;<br><br>    <span class="hljs-comment">//匹配身份证</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">checkIdCard</span><span class="hljs-params">(String s)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">regExp</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;^[1-9]\\d&#123;5&#125;(18|19|20|(3\\d))\\d&#123;2&#125;((0[1-9])|(1[0-2]))(([0-2][1-9])|10|20|30|31)\\d&#123;3&#125;[0-9Xx]$&quot;</span>;<br>        <span class="hljs-keyword">return</span> s.matches(regExp);<br>    &#125;<br><br>    <span class="hljs-comment">//匹配0-200字符</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">check0_200Char</span><span class="hljs-params">(String s)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">regExp</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;^[\\u4E00-\\u9FA5A-Za-z0-9_]&#123;0,200&#125;$&quot;</span>;<br>        <span class="hljs-keyword">return</span> s.matches(regExp);<br>    &#125;<br><br>    <span class="hljs-comment">//匹配1-200字符加()</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">check1_200Char1</span><span class="hljs-params">(String s)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">regExp</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;^[\\u4E00-\\u9FA5A-Za-z0-9_()（）]&#123;1,200&#125;$&quot;</span>;<br>        <span class="hljs-keyword">return</span> s.matches(regExp);<br>    &#125;<br><br><br>    <span class="hljs-comment">//匹配0-400字符</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">check400Char</span><span class="hljs-params">(String s)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">regExp</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;^([\\s\\S]*)&#123;0,400&#125;$&quot;</span>;<br>        <span class="hljs-keyword">return</span>  s.matches(regExp);<br>    &#125;<br><br></code></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InfoFilterUtilTest</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">//过滤手机号</span><br>        System.out.println(<span class="hljs-string">&quot;12345678910是不是手机号:&quot;</span>+InfoFilterUtil.checkPhone(<span class="hljs-string">&quot;12345678910&quot;</span>));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">12345678910</span>是不是手机号:<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>这是我在Github上开源项目中的其中一个工具类，目前过滤的信息并不多，有需要的可以联系我补充。也欢迎有兴趣的伙伴可以加入这个开源项目中来，贡献自己的力量。下面是项目的地址：</p><blockquote><p><a href="https://github.com/GerryMCzzZ/Java-Utils">https://github.com/GerryMCzzZ/Java-Utils</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>JAVA工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>小工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java使用雪花id</title>
    <link href="/2021/01/05/snowflake/"/>
    <url>/2021/01/05/snowflake/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>雪花ID即SnowFlakeID，通常雪花ID是和分布式一起使用的。借鉴一下别人的介绍：<br>SnowFlake是twitter公司内部分布式项目采用的ID生成算法，开源后广受国内大厂的好评。由这种算法生成的ID，我们就叫做SnowFlakeID</p><p>SnowFlakeID的最大的特性就是天然去中心化，通过时间戳、工作机器编号两个变量进行配置后，通过SnowFlake算法会生成唯一的递增ID。在任何机器上，只要保证工作机器编号不同，就可以确保生成的ID唯一，且整体趋势是递增的</p><p>Snowflake的结构如下(每部分用-分开):</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">0 - 0000000000 0000000000 0000000000 0000000000 0 - 0000000000 - 000000000000<br></code></pre></td></tr></table></figure><span id="more"></span><p>第一段1位为未使用，永远固定为0</p><p>第二段41位为毫秒级时间(41位的长度可以使用69年)</p><p>第三段10位为workerId(10位的长度最多支持部署1024个节点）</p><p>第三段12位为毫秒内的计数（12位的计数顺序号支持每个节点每毫秒产生4096个ID序号）</p><p>如果按照1024的满节点（1个节点就是1个部署的服务）计算，每毫秒可生成的ID序号有1024*4096&#x3D;4194304个，足以满足现在绝大多数的业务情况</p><p>算法的核心如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">((当前时间 - 服务时间) &lt;&lt; timestampLeftShift) <br>       | (机器ID &lt;&lt; workerIdShift) <br>       | sequence;<br></code></pre></td></tr></table></figure><p>服务时间指的是服务的开发时间，即第一个正式ID产生的时间。由于SnowFlakeID最长可用69年（因为只有41个bit，41个bit的最大值换算成年就是69年）。所以服务时间越贴近上线时间，则该算法可用时间越长。<br>其中sequence为递增序列，当前时间戳和上一ID生成时间戳一致时，sequence就递增1，直到4096为止。</p><h1 id="SnowFlake有什么问题"><a href="#SnowFlake有什么问题" class="headerlink" title="SnowFlake有什么问题"></a>SnowFlake有什么问题</h1><p>SnowFlake很好，分布式、去中心化、无第三方依赖。但它并不是完美的，由于SnowFlake强依赖时间戳，所以时间的变动会造成SnowFlake的算法产生错误。</p><p>时钟回拨:最常见的问题就是时钟回拨导致的ID重复问题，在SnowFlake算法中并没有什么有效的解法，仅是抛出异常。时钟回拨涉及两种情况①实例停机→时钟回拨→实例重启→计算ID ②实例运行中→时钟回拨→计算ID</p><p>手动配置:另一个就是workerId（机器ID）是需要部署时手动配置，而workerId又不能重复。几台实例还好，一旦实例达到一定量级，管理workerId将是一个复杂的操作。</p><blockquote><p>简介来源<a href="https://www.cnblogs.com/zer0Black/p/12323541.html">https://www.cnblogs.com/zer0Black/p/12323541.html</a></p></blockquote><h1 id="如何优化"><a href="#如何优化" class="headerlink" title="如何优化"></a>如何优化</h1><p>机器ID的配置需要自己按照自己的规范去执行，这需要人主观去解决。这里重点聊聊怎么解决时钟回拨的问题。引用的文章说的方案我就不说了，可以通过介绍链接地址去了解。我的工具类使用的方案是用变量记录上一个id的时间戳，如果当前的时间戳小于上一个的，那么就阻塞1s或者直接抛出异常，重新获取id。</p><h1 id="干代码"><a href="#干代码" class="headerlink" title="干代码"></a>干代码</h1><p>复制工具类代码，或者点击链接<a href="https://github.com/GerryMCzzZ/Java-Utils/blob/main/JavaUtils/src/main/java/org/gerrymc/javautils/utils/SnowFlakeUtil.java">SnowFlakeUtil.java</a>到我GitHub的开源项目中下载，里面还有其他开发中常用的工具类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.gerrymc.springbootutils.utils;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> GerryMC</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 生成雪花id工具类</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>: 2020/5/15 0015 14:02</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SnowFlakeUtil</span> &#123;<br><br>    <span class="hljs-comment">// ==============================Fields===========================================</span><br>    <span class="hljs-comment">/** 开始时间截 (2020-07-15) */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">twepoch</span> <span class="hljs-operator">=</span> <span class="hljs-number">1594800420694L</span>;<br>    <span class="hljs-comment">/** 机器id所占的位数 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">workerIdBits</span> <span class="hljs-operator">=</span> <span class="hljs-number">5L</span>;<br><br>    <span class="hljs-comment">/** 数据标识id所占的位数 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">datacenterIdBits</span> <span class="hljs-operator">=</span> <span class="hljs-number">5L</span>;<br><br>    <span class="hljs-comment">/** 支持的最大机器id，结果是31 (这个移位算法可以很快的计算出几位二进制数所能表示的最大十进制数) */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">maxWorkerId</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1L</span> ^ (-<span class="hljs-number">1L</span> &lt;&lt; workerIdBits);<br><br>    <span class="hljs-comment">/** 支持的最大数据标识id，结果是31 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">maxDatacenterId</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1L</span> ^ (-<span class="hljs-number">1L</span> &lt;&lt; datacenterIdBits);<br><br>    <span class="hljs-comment">/** 序列在id中占的位数 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">sequenceBits</span> <span class="hljs-operator">=</span> <span class="hljs-number">12L</span>;<br><br>    <span class="hljs-comment">/** 机器ID向左移12位 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">workerIdShift</span> <span class="hljs-operator">=</span> sequenceBits;<br><br>    <span class="hljs-comment">/** 数据标识id向左移17位(12+5) */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">datacenterIdShift</span> <span class="hljs-operator">=</span> sequenceBits + workerIdBits;<br><br>    <span class="hljs-comment">/** 时间截向左移22位(5+5+12) */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">timestampLeftShift</span> <span class="hljs-operator">=</span> sequenceBits + workerIdBits + datacenterIdBits;<br><br>    <span class="hljs-comment">/** 生成序列的掩码，这里为4095 (0b111111111111=0xfff=4095) */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">sequenceMask</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1L</span> ^ (-<span class="hljs-number">1L</span> &lt;&lt; sequenceBits);<br><br>    <span class="hljs-comment">/** 工作机器ID(0~31) */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> workerId;<br><br>    <span class="hljs-comment">/** 数据中心ID(0~31) */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> datacenterId;<br><br>    <span class="hljs-comment">/** 毫秒内序列(0~4095) */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> <span class="hljs-variable">sequence</span> <span class="hljs-operator">=</span> <span class="hljs-number">0L</span>;<br><br>    <span class="hljs-comment">/** 上次生成ID的时间截 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> <span class="hljs-variable">lastTimestamp</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1L</span>;<br><br>    <span class="hljs-comment">//==============================Constructors=====================================</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 构造函数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> workerId 工作ID (0~31)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> datacenterId 数据中心ID (0~31)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SnowFlakeUtil</span><span class="hljs-params">(<span class="hljs-type">long</span> workerId, <span class="hljs-type">long</span> datacenterId)</span> &#123;<br>        <span class="hljs-keyword">if</span> (workerId &gt; maxWorkerId || workerId &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(String.format(<span class="hljs-string">&quot;worker Id can&#x27;t be greater than %d or less than 0&quot;</span>, maxWorkerId));<br>        &#125;<br>        <span class="hljs-keyword">if</span> (datacenterId &gt; maxDatacenterId || datacenterId &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(String.format(<span class="hljs-string">&quot;datacenter Id can&#x27;t be greater than %d or less than 0&quot;</span>, maxDatacenterId));<br>        &#125;<br>        <span class="hljs-built_in">this</span>.workerId = workerId;<br>        <span class="hljs-built_in">this</span>.datacenterId = datacenterId;<br>    &#125;<br><br>    <span class="hljs-comment">// ==============================Methods==========================================</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获得下一个ID (该方法是线程安全的)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> SnowflakeId</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-type">long</span> <span class="hljs-title function_">nextId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">timestamp</span> <span class="hljs-operator">=</span> timeGen();<br><br>        <span class="hljs-comment">//如果当前时间小于上一次ID生成的时间戳，说明系统时钟回退过这个时候应当抛出异常</span><br>        <span class="hljs-keyword">if</span> (timestamp &lt; lastTimestamp) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<br>                    String.format(<span class="hljs-string">&quot;Clock moved backwards.  Refusing to generate id for %d milliseconds&quot;</span>, lastTimestamp - timestamp));<br>        &#125;<br><br>        <span class="hljs-comment">//如果是同一时间生成的，则进行毫秒内序列</span><br>        <span class="hljs-keyword">if</span> (lastTimestamp == timestamp) &#123;<br>            sequence = (sequence + <span class="hljs-number">1</span>) &amp; sequenceMask;<br>            <span class="hljs-comment">//毫秒内序列溢出</span><br>            <span class="hljs-keyword">if</span> (sequence == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">//阻塞到下一个毫秒,获得新的时间戳</span><br>                timestamp = tilNextMillis(lastTimestamp);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//时间戳改变，毫秒内序列重置</span><br>        <span class="hljs-keyword">else</span> &#123;<br>            sequence = <span class="hljs-number">0L</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//上次生成ID的时间截</span><br>        lastTimestamp = timestamp;<br><br>        <span class="hljs-comment">//移位并通过或运算拼到一起组成64位的ID</span><br>        <span class="hljs-keyword">return</span> ((timestamp - twepoch) &lt;&lt; timestampLeftShift) <span class="hljs-comment">//</span><br>                | (datacenterId &lt;&lt; datacenterIdShift) <span class="hljs-comment">//</span><br>                | (workerId &lt;&lt; workerIdShift) <span class="hljs-comment">//</span><br>                | sequence;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 阻塞到下一个毫秒，直到获得新的时间戳</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> lastTimestamp 上次生成ID的时间截</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 当前时间戳</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">long</span> <span class="hljs-title function_">tilNextMillis</span><span class="hljs-params">(<span class="hljs-type">long</span> lastTimestamp)</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">timestamp</span> <span class="hljs-operator">=</span> timeGen();<br>        <span class="hljs-keyword">while</span> (timestamp &lt;= lastTimestamp) &#123;<br>            timestamp = timeGen();<br>        &#125;<br>        <span class="hljs-keyword">return</span> timestamp;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回以毫秒为单位的当前时间</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 当前时间(毫秒)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">long</span> <span class="hljs-title function_">timeGen</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> System.currentTimeMillis();<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 单次获取雪花id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getSnowflakeId</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">SnowFlakeUtil</span> <span class="hljs-variable">snowFlakeUtil</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SnowFlakeUtil</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> snowFlakeUtil.nextId();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用方式："><a href="#使用方式：" class="headerlink" title="使用方式："></a>使用方式：</h2><p>1.单个id赋值，每次初始化实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">long</span> <span class="hljs-variable">snowFlakeId</span> <span class="hljs-operator">=</span> SnowFlakeUtil.getSnowflakeId();<br></code></pre></td></tr></table></figure><p>2.批量id赋值，一般是数据处理好了可以统一赋值id。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//初始化雪花id类，参数机器ID，数据中心ID（用于分布式扩展）</span><br> <span class="hljs-type">SnowFlakeUtil</span> <span class="hljs-variable">snowFlake</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SnowFlakeUtil</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br> <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; num; i++) &#123;<br>    System.out.println(snowFlake.nextId());<br> &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JAVA工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>小工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
